#pragma kernel ApplyGravity
#pragma kernel ApplyMovement
#pragma kernel DoubleRelaxation
#pragma kernel UpdateFinalVel

RWStructuredBuffer<float3> ParticlesPos;
RWStructuredBuffer<float3> ParticlesOldPos;
RWStructuredBuffer<float3> ParticlesVel;
RWStructuredBuffer<float4> ParticlesCol;

uint particleCount;

float timeDelta;
float3 volume;
float time;

float particleRadius;
float3 gravity;
float density;
float k;
float springForce;

float SqrtLength(float3 vec)
{
	return vec.x*vec.x + vec.y*vec.y + vec.z*vec.z;
}

[numthreads(64,1,1)]
void ApplyGravity (uint3 id : SV_DispatchThreadID) {
    
    ParticlesVel[id.x] += gravity*timeDelta;
}

[numthreads(64,1,1)]
void ApplyMovement (uint3 id : SV_DispatchThreadID) {

    float3 pos = ParticlesPos[id.x];

    ParticlesOldPos[id.x] = pos;
    pos += ParticlesVel[id.x]*timeDelta;

    //float3 clipDir = normalize(pos - volume);

    float3 clipDir = min(max(pos - volume,-1),1);


    float3 clipForce = max(abs(pos)-volume,0);

    //pos -= clipDir*clipForce * springForce * timeDelta*timeDelta;
    pos -= clipDir*clipForce*2;
    ParticlesPos[id.x] = pos;
}

[numthreads(64,1,1)]
void DoubleRelaxation (uint3 id : SV_DispatchThreadID) {

    float p = 0;

    float3 pos = ParticlesPos[id.x];

    for(int i=0;i<particleCount;i++)
    {
        if(id.x != i)
        {
	        float3 otherPos = ParticlesPos[i];
	        float q = sqrt(SqrtLength(otherPos-pos) / particleRadius);
	        if(q<1)
	        {
		        p = p + (1-q)*(1-q);
	        }
        }
    }

    float P = k*(p-density);
    float3 dx = 0;

    for(int i=0;i<particleCount;i++)
    {
        if(id.x != i)
        {
	       float3 otherDir = ParticlesPos[i]-pos;
	        float q = sqrt(SqrtLength(otherDir) / particleRadius);
	        if(q<1)
	        {
	            float3 D = timeDelta*timeDelta * (P*(1-q))*normalize(otherDir);
	            ParticlesPos[i] += D/2.0f;
	            dx -= D/2.0f;
	        } 
        }
    }

    ParticlesPos[id.x] = pos + dx;
}

[numthreads(64,1,1)]
void UpdateFinalVel (uint3 id : SV_DispatchThreadID) {
    
    ParticlesVel[id.x] = (ParticlesPos[id.x]-ParticlesOldPos[id.x]) / timeDelta;
}